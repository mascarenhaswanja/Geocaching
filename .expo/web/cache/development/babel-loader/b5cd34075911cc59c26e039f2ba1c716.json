{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/mayankarya/Documents/Geocaching/Screens/MapGeoCachingScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport * as Location from \"expo-location\";\nimport MapView, { Marker, Animated } from 'react-native-maps';\nimport { db } from \"../utilities/FirebaseManager\";\nimport GeoCachingList from \"./GeoCachingListComponent\";\n\nfunction MapGeoCachingScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      locPinData = _useState2[0],\n      setLocPinData = _useState2[1];\n\n  var _useState3 = useState({\n    latitude: 43.6163539,\n    longitude: -79.3793008,\n    latitudeDelta: 0.05,\n    longitudeDelta: 0.05\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currRegion = _useState4[0],\n      setCurrentRegion = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedPin = _useState6[0],\n      setSelectedPin = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showAddToFav = _useState8[0],\n      setShowAddToFav = _useState8[1];\n\n  var getGeoCachingLocationFromFirebase = function getGeoCachingLocationFromFirebase() {\n    var tempLocArray = [];\n    db.collection(\"cachLocations\").get().then(function (querySnapshot) {\n      querySnapshot.forEach(function (documentFromFirestore) {\n        tempLocArray.push({\n          lat: documentFromFirestore.get(\"lat\"),\n          lng: documentFromFirestore.get(\"lng\"),\n          desc: documentFromFirestore.get(\"desc\"),\n          key: documentFromFirestore.id\n        });\n        setLocPinData(tempLocArray);\n      });\n    });\n  };\n\n  useEffect(function () {\n    getGeoCachingLocationFromFirebase();\n  }, []);\n\n  var onMapMoved = function onMapMoved(data) {\n    console.log(data);\n  };\n\n  var onMarkerSelected = function onMarkerSelected(docId) {};\n\n  var AddToFavClick = function AddToFavClick() {\n    db.collection(\"favourites\").add(selectedPin).then(function (docRef) {\n      console.log(\"Document written with ID: \", docRef.id);\n      setResult(\"Successfully added to Fav List\");\n    }).catch(function (error) {\n      console.error(\"Error adding document: \", error);\n      setResult(\"Error while adding to Fav List!\");\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, React.createElement(GeoCachingList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }));\n}\n\nexport default MapGeoCachingScreen;","map":{"version":3,"sources":["/Users/mayankarya/Documents/Geocaching/Screens/MapGeoCachingScreen.js"],"names":["React","useState","useEffect","Location","MapView","Marker","Animated","db","GeoCachingList","MapGeoCachingScreen","props","locPinData","setLocPinData","latitude","longitude","latitudeDelta","longitudeDelta","currRegion","setCurrentRegion","selectedPin","setSelectedPin","showAddToFav","setShowAddToFav","getGeoCachingLocationFromFirebase","tempLocArray","collection","get","then","querySnapshot","forEach","documentFromFirestore","push","lat","lng","desc","key","id","onMapMoved","data","console","log","onMarkerSelected","docId","AddToFavClick","add","docRef","setResult","catch","error","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from \"react\"\nimport {View, Text, Dimensions, Button, FlatList} from \"react-native\";\nimport * as Location from \"expo-location\";\nimport MapView, { Marker , Animated } from 'react-native-maps';\nimport { db } from \"../utilities/FirebaseManager\"\nimport GeoCachingList from \"./GeoCachingListComponent\";\n\n\n\n//define the exponent\nfunction MapGeoCachingScreen(props) {\n    const [locPinData,setLocPinData] = useState([]);\n    const [currRegion,setCurrentRegion] = useState({\n        latitude: 43.6163539,\n        longitude:  -79.3793008,\n        latitudeDelta: 0.05,\n        longitudeDelta: 0.05,   \n      }\n     )\n    const [selectedPin,setSelectedPin] = useState('');\n    const [showAddToFav, setShowAddToFav] = useState(false);\n\n    const getGeoCachingLocationFromFirebase = () => {\n        const tempLocArray = [];\n        db.collection(\"cachLocations\").get().then((querySnapshot) => {\n            querySnapshot.forEach((documentFromFirestore) => {\n            // tempArray.push({title : documentFromFirestore.get(\"title\"), id : documentFromFirestore.id});\n            // setListData(tempArrray);\n            tempLocArray.push({lat : documentFromFirestore.get(\"lat\"), lng : documentFromFirestore.get(\"lng\"), desc : documentFromFirestore.get(\"desc\"), key : documentFromFirestore.id })\n\n            setLocPinData(tempLocArray);\n            });\n          });\n    }\n\n    useEffect(()=> {getGeoCachingLocationFromFirebase()},[]);\n\n    \n     const onMapMoved = (data) => {\n       console.log(data)\n     }\n\n     const onMarkerSelected = (docId) => {\n        // setShowAddToFav(true);\n        // setSelectedPin(docId);\n     }\n\n     const AddToFavClick = () => {\n        db.collection(\"favourites\").add(selectedPin)\n        .then((docRef) => {\n            console.log(\"Document written with ID: \", docRef.id);\n            setResult(`Successfully added to Fav List`)\n        })\n        .catch((error) => {\n            console.error(\"Error adding document: \", error);\n            setResult(\"Error while adding to Fav List!\");\n        });\n     }\n\n      return (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n          <GeoCachingList />\n          {/* <Text>MapScreen!</Text>\n          <MapView\n           style={{width: Dimensions.get('window').width, height:600}}\n           initialRegion={currRegion}\n           onRegionChangeComplete={onMapMoved}\n           showCurrentLocation='true'\n           showsCompass={true}\n           maxZoomLevel={8}\n           \n         >\n           <Marker coordinate={{latitude: 45.51, longitude: -73.5775}} title=\"Pin\" onPress={()=> {console.log(\"Marker clicked\")}}/>\n           <Marker coordinate={{latitude: 45.41, longitude: -73.5775}} title=\"New Pin\"/>\n    \n           {\n               locPinData.map((pin) => {\n               return <Marker key={pin.key} coordinate={{latitude: pin.lat , longitude: pin.lng}} title={pin.desc} onPress={onMarkerSelected(pin.key)}/>\n               })\n           }\n           </MapView> \n           { showAddToFav ? <></> : <View>\n               <Text>Marker details</Text>\n               <Button title=\"Add To Fav\" onPress={AddToFavClick}></Button>\n            </View>  }\n               */}\n        </View>\n      );\n    \n}\n\n\n\n//export the component\nexport default MapGeoCachingScreen;"]},"metadata":{},"sourceType":"module"}