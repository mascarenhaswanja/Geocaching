{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/graphic/Documents/#mads4008_Advanced_Web/#project/Geocaching/Screens/FavouriteScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { geostyles } from \"../utilities/Styles\";\nimport { db } from \"../utilities/FirebaseManager\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nfunction FavouriteScreen(props) {\n  var _this = this;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      buttonEnabled = _useState8[0],\n      setButtonEnabled = _useState8[1];\n\n  var caches = [];\n\n  var getAllCaches = function getAllCaches() {\n    console.log(\"Fav - Get All Caches\");\n    db.collection(\"favorites\").get().then(function (querySnapshot) {\n      querySnapshot.forEach(function (documentFromFirestore) {\n        console.log(documentFromFirestore.id + \", \" + JSON.stringify(documentFromFirestore.data()));\n        var fav = {\n          id: documentFromFirestore.data().id,\n          title: documentFromFirestore.data().title\n        };\n        console.log(\"Fav Firestore \", fav);\n        caches.push(fav);\n      });\n\n      if (caches.length === 0) {\n        alert(\"No Locations found\");\n        setButtonEnabled(false);\n      }\n\n      setData(caches);\n    });\n    setIsLoading(false);\n    console.log(\"Caches \", caches);\n  };\n\n  useEffect(function () {\n    getAllCaches();\n  }, []);\n\n  var saveFavorite = function saveFavorite() {\n    getEmail();\n    var cache = {\n      id: data.id,\n      title: data.title\n    };\n    db.collection(\"favorites\").add(cache).then(function (doc) {\n      console.log(\"Document saved: \" + doc.id);\n    }).catch(function (err) {\n      console.log(\"Error saving video \" + err);\n    });\n  };\n\n  var getEmail = function getEmail() {\n    AsyncStorage.getItem(\"email\").then(function (dataFromStorage) {\n      if (dataFromStorage === null) {\n        console.log(\"Could not found\");\n      } else {\n        console.log(\"Successful get Email \" + dataFromStorage);\n        setEmail(dataFromStorage);\n      }\n    }).catch(function (error) {\n      console.log(\"Error get Primitive item \" + error);\n    });\n  };\n\n  return React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: geostyles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"My Favorites\"), isLoading ? React.createElement(ActivityIndicator, {\n    animating: true,\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 24\n    }\n  }) : React.createElement(FlatList, {\n    data: data,\n    keyExtractor: function keyExtractor(item, index) {\n      return item.id;\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(TouchableOpacity, {\n        onLongPress: function onLongPress() {\n          console.log(\" Selected: \" + item.id + \" \" + item.title);\n          saveFavorite();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: geostyles.item_title,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      }, item.title)), React.createElement(View, {\n        style: geostyles.separator,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default FavouriteScreen;","map":{"version":3,"sources":["/Users/graphic/Documents/#mads4008_Advanced_Web/#project/Geocaching/Screens/FavouriteScreen.js"],"names":["React","useState","useEffect","geostyles","db","AsyncStorage","FavouriteScreen","props","email","setEmail","data","setData","isLoading","setIsLoading","buttonEnabled","setButtonEnabled","caches","getAllCaches","console","log","collection","get","then","querySnapshot","forEach","documentFromFirestore","id","JSON","stringify","fav","title","push","length","alert","saveFavorite","getEmail","cache","add","doc","catch","err","getItem","dataFromStorage","error","item","index","item_title","separator"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport {View, Text, SafeAreaView} from \"react-native\";\nimport { geostyles } from '../utilities/Styles'\nimport { db } from '../utilities/FirebaseManager'\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n \nfunction FavouriteScreen(props) {\n    const [email, setEmail] = useState('')\n    const [data, setData] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n    const [buttonEnabled, setButtonEnabled] = useState(true)\n    let caches = []\n\n    const getAllCaches = () => {\n        console.log(\"Fav - Get All Caches\") \n        db.collection(\"favorites\").get().then((querySnapshot) => {\n          querySnapshot.forEach((documentFromFirestore) => {\n            console.log(`${documentFromFirestore.id}, ${JSON.stringify(documentFromFirestore.data())}`)\n            const fav = {\n                id:  documentFromFirestore.data().id,\n                title: documentFromFirestore.data().title\n            }\n            console.log(\"Fav Firestore \",fav)\n            caches.push(fav)\n          });\n          if (caches.length === 0) {\n              alert(\"No Locations found\")\n              setButtonEnabled(false)\n          }\n          setData(caches)\n        });\n        setIsLoading(false)\n        console.log(\"Caches \",caches)\n    }\n\n    useEffect( () => {getAllCaches()}, [])\n\n    const saveFavorite = () => {\n        getEmail()\n        const cache =  {\n            id: data.id,\n            title: data.title }\n        db.collection(\"favorites\").add(cache)\n            .then(\n                (doc)=>{\n                    console.log(`Document saved: ${doc.id}`)\n                }\n            ).catch(\n                (err)=> {\n                    console.log(`Error saving video ${err}`)\n                }\n            )\n     }\n\n     const getEmail = () => {\n        AsyncStorage.getItem(\"email\")\n          .then( \n            (dataFromStorage) => {\n              if (dataFromStorage === null) {\n                console.log(`Could not found`)\n              } else {\n                console.log(`Successful get Email ${dataFromStorage}`)\n                setEmail(dataFromStorage)\n              }\n            }\n          )\n          .catch(\n            (error) => {\n              console.log(`Error get Primitive item ${error}`)\n            }\n          )\n      }\n    return (\n        <SafeAreaView>\n        <Text style={geostyles.title}>My Favorites</Text>\n        {/* <Button title=\"FAVOURITE\" disabled={!buttonEnabled} onPress={saveFavorite}/> */}\n        { isLoading ? (<ActivityIndicator animating={true} size=\"large\"/>) : (\n            <FlatList\n            data = {data}\n            keyExtractor = { (item, index) => { return item.id }} \n            renderItem = { ( {item} ) => (\n            <TouchableOpacity  onLongPress={ () => { \n                console.log(` Selected: ${item.id} ${item.title}`)\n                saveFavorite()\n                 }}>\n                <View>\n                    <Text style={geostyles.item_title}>{item.title}</Text>\n                </View>\n                <View  style={geostyles.separator}/>\n            </TouchableOpacity>)}\n            />\n        )}\n        \n        </SafeAreaView>\n\n\n    );\n}\n\nexport default FavouriteScreen;"]},"metadata":{},"sourceType":"module"}